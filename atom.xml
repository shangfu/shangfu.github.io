<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[何以算法]]></title>
  <link href="http://whyalgorithm.com//atom.xml" rel="self"/>
  <link href="http://whyalgorithm.com//"/>
  <updated>2015-08-28T18:37:33+00:00</updated>
  <id>http://whyalgorithm.com//</id>
  <author>
    <name><![CDATA[WhyAlgorithm]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reliable Fortune's Algorithm Implementation]]></title>
    <link href="http://whyalgorithm.com//blog/2015/08/26/reliable-voronoi-implementation/"/>
    <updated>2015-08-26T19:30:06+00:00</updated>
    <id>http://whyalgorithm.com//blog/2015/08/26/reliable-voronoi-implementation</id>
    <content type="html"><![CDATA[<p style="text-align:center;"><img src="https://upload.wikimedia.org/wikipedia/commons/0/0c/Fortunes-algorithm-slowed.gif" alt="Wiki" /></p>

<p>Fortune&rsquo;s algorithm is a sweep line algorithm for generating
a Voronoi diagram from a set of points in a plane using \(O(n log n)\) time and \(O(n)\) space
[<a href="https://en.wikipedia.org/wiki/Fortune%27s_algorithm">Wiki</a>].</p>

<p>I have one subtask that need to generate a Voronoi diagram for 24 million vertices in the USA road network.
As far as I tested, many Fortune&rsquo;s algorithm implementations online are not reliable.
They may be OK to generate the Voronoi diagram from random points, but sometimes shitty
to process the points that are concyclic.
For example, few of them can solve the simple case even for 4 points,
$$(0,0), (0,1), (1,0), (1,1)$$
On the other hand, some implementations that can pass my small test cases still face the speed problem
for 24 million vertices.</p>

<p>Finally, I recommand three implementations:</p>

<h2>Boost.Polygon Voronoi</h2>

<p>A little ashamed that I did not know Boost has also implemented Voronoi. It is the last implementation I tried,
but I should recommand it first since it is super easy to use.
Here is the Boost Voronoi
<a href="http://www.boost.org/doc/libs/1_54_0/libs/polygon/doc/voronoi_main.htm">Main Page</a> and
<a href="http://www.boost.org/doc/libs/1_54_0/libs/polygon/doc/voronoi_benchmark.htm">Benchmark</a> compared with CGAL and S-Hull
(related to qhull)
As the Benchmark said,</p>

<ul>
<li>Boost.Polygon Voronoi - implements sweep-line algorithm.</li>
<li>CGAL - implements incremental algorithm.</li>
<li>S-Hull - S-Hull is a <strong>non-robust implementation</strong> of the sweep-hull algorithm used to construct Delaunay triangulation of a set of points.</li>
</ul>


<p>Using Boost Voronoi, my Voronoi computation for 24 million road vertices just speeds around 10 mins. Here is my simple code after
install <code>libboost-dev</code> in Ubuntu Software Center. Note that in the output of this code, every Voronoi edge will be reported twice.</p>

<figure class='code'><figcaption><span>voronoi.cpp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;boost/polygon/voronoi.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">boost</span><span class="o">::</span><span class="n">polygon</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="kt">double</span> <span class="n">coordinate_type</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">point_data</span><span class="o">&lt;</span><span class="n">coordinate_type</span><span class="o">&gt;</span> <span class="n">Point</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">voronoi_diagram</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">VD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">points</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//    points.push_back(Point(0, 0));</span>
</span><span class='line'><span class="c1">//    points.push_back(Point(1, 0));</span>
</span><span class='line'><span class="c1">//    points.push_back(Point(0, 1));</span>
</span><span class='line'><span class="c1">//    points.push_back(Point(1, 1));</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>      <span class="n">points</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">VD</span> <span class="n">vd</span><span class="p">;</span>
</span><span class='line'>  <span class="n">construct_voronoi</span><span class="p">(</span><span class="n">points</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">points</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">vd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">VD</span><span class="o">::</span><span class="n">const_edge_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">vd</span><span class="p">.</span><span class="n">edges</span><span class="p">().</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">vd</span><span class="p">.</span><span class="n">edges</span><span class="p">().</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">is_primary</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">is_finite</span><span class="p">())</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;(&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex0</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex0</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;) --- (&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex1</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex1</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;)&quot;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Point</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">cell</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">source_index</span><span class="p">()];</span>
</span><span class='line'>                <span class="n">Point</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">points</span><span class="p">[</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">twin</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">cell</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">source_index</span><span class="p">()];</span>
</span><span class='line'>                <span class="n">Point</span> <span class="n">origin</span><span class="p">;</span>
</span><span class='line'>                <span class="n">Point</span> <span class="n">direction</span><span class="p">;</span>
</span><span class='line'>                <span class="n">coordinate_type</span> <span class="n">koef</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">((</span><span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">+</span> <span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">())</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>                <span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">((</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">+</span> <span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">())</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'>                <span class="n">direction</span><span class="p">.</span><span class="n">x</span><span class="p">(</span><span class="n">p1</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">-</span> <span class="n">p2</span><span class="p">.</span><span class="n">y</span><span class="p">());</span>
</span><span class='line'>                <span class="n">direction</span><span class="p">.</span><span class="n">y</span><span class="p">(</span><span class="n">p2</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">-</span> <span class="n">p1</span><span class="p">.</span><span class="n">x</span><span class="p">());</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex0</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;(&quot;</span><span class="o">&lt;&lt;</span>  <span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">-</span> <span class="n">direction</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">*</span> <span class="n">koef</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">-</span> <span class="n">direction</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">*</span> <span class="n">koef</span><span class="o">&lt;&lt;</span><span class="s">&quot;) --- &quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;(&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex0</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex0</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;)  --- &quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex1</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;(&quot;</span><span class="o">&lt;&lt;</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">+</span> <span class="n">direction</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">*</span> <span class="n">koef</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">+</span> <span class="n">direction</span><span class="p">.</span><span class="n">y</span><span class="p">()</span> <span class="o">*</span> <span class="n">koef</span><span class="o">&lt;&lt;</span><span class="s">&quot;)&quot;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span><span class="p">{</span>
</span><span class='line'>                  <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;(&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex1</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;,&quot;</span><span class="o">&lt;&lt;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">vertex1</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&quot;)&quot;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CGAL library</h2>

<p>As mentioned by Boost Voronoi, CGAL implements incremental algorithm.
The obscurest thing of CGAL is the compiling process.</p>

<p>It is better to use <code>cmake</code> to link your program to CGAL libraries as follows.</p>

<ol>
<li><p>Install <code>libcgal-dev</code> and <code>libcgal-demo</code> in Ubuntu Software Center. I think it should automatically install Boost C++ libraries as well.
If not, you need to install <code>libboost-dev</code> in Ubuntu Software Center.</p></li>
<li><p>In order to compile your program correctly, you&rsquo;d better to generate <code>CMakeLists.txt</code> by running <code>cgal_create_cmake_script</code> command
in Terminal. In particular, you should run the following commands in your program folder:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cgal_create_cmake_script   #generate CMakeLists.txt
</span><span class='line'>cmake .                    #generate Makefile, CMakeFiles folder, and two extra files
</span><span class='line'>make                       #automatically compile your .cpp files</span></code></pre></td></tr></table></div></figure>


<h2>Brad Barber&rsquo;s Qhull program</h2>

<p><a href="http://www.qhull.org/">Qhull</a> is also easy to use. Just download and decompressed the package, and then <code>make</code> it.
The examples of Qhull are clear. <code>rbox</code> command can generate the example input format, and then use <code>qvoronoi</code>
to compute Voronoi diagram.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessibility Metric]]></title>
    <link href="http://whyalgorithm.com//blog/2015/08/21/how-to-define-accessibility/"/>
    <updated>2015-08-21T18:47:49+00:00</updated>
    <id>http://whyalgorithm.com//blog/2015/08/21/how-to-define-accessibility</id>
    <content type="html"><![CDATA[<div align="middle">
<iframe width="560" height="315" src="https://www.youtube.com/embed/fxxDzLNGeoU" frameborder="0" allowfullscreen></iframe>
</div>


<h3>Notes</h3>

<ul>
<li><p>State Smart Transportation Initiative (<a href="http://www.ssti.us">SSTI</a>)</p></li>
<li><p>Example: how many jobs can be accessed within X minitues by bus/transit/auto. We can draw an accessibility intensity distribution.
Furthermore, draw the intensity distribution every minute varying the traffic from 7am-9am, and then average them to get
the picture about accessibility in traffic.</p></li>
<li><p>$$
Accessibility~Score = \sum \frac{Opportunities}{Travel~Time \times Decay}
$$
where: <strong>Opportunities</strong> is number of jobs (or something), <strong>Decay</strong> is the factor reflecting decrease in value of opportunity that
are further away, which is different for each travel model.</p></li>
<li><p>Problem about analytic tool support:</p>

<blockquote><p>Existing tools lack sensitivity for complex planning and programming needs.</p></blockquote></li>
<li><p>NCHRP 8-78 Accessibility Model => Multimodel accessibility (MMA). These new tools can be stand-alone scenario planning tools or to <strong>supplement state/MPO TAZ model</strong>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速搭建Github Page个人博客]]></title>
    <link href="http://whyalgorithm.com//blog/2015/08/20/how-to-build-blog/"/>
    <updated>2015-08-20T14:53:32+00:00</updated>
    <id>http://whyalgorithm.com//blog/2015/08/20/how-to-build-blog</id>
    <content type="html"><![CDATA[<p>继“Hello World”后，整理下搭建本Blog的过程，顺便练练手。网上已经有很多相关的教程，
所以很多地方不再赘述，以引用和个人碰到的问题为主。</p>

<p>本博客使用到的工具有Cloud9 (云端编写环境），Github（云端服务器）以及Octopress模板。
由于以下所有的工具和命令都可以在游览器上完成，所以理论上在任何一台电脑上都可以完成搭建任务。
为什么要选择Github Page的文章很多，比如<a href="http://www.jtianling.com/write-blog-with-jekyll-and-github-page.html">这里</a>。</p>

<hr />

<h3>1. Ruby环境</h3>

<p>由于Octopress基于Jekyll，所以需要本地安装Ruby。安装Ruby RVM环境或许会让人感觉困扰，尤其是windows用户。即使是linux用户，如果source.list里面有任何地址导致<code>apt-get update</code> 命令出现error，
<code>gem</code> 和 <code>bundle install</code> 命令也会拒绝安装。这就是云平台的优势了。</p>

<p>创建Cloud9的账户，然后新建一个workspace, template 设为 &ldquo;Ruby on Rails Tutorial"。于是所有本地需要的tools都已装好。
接下来在你Cloud9的workspace中打开 Terminal 开始输命令，来自 <a href="http://qjpcpu.github.io/blog/2014/08/31/shi-yong-octopressda-jian-github-pages/">这里</a>:</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
bundle install
rake install
</code></pre>

<h3>2. Octopress+Github</h3>

<p>Octopress已经可以了。这时需要在Github里新建一个名为<code>username.github.io</code>的空Repo，请设置为public。
然后回到Cloud9开始初始化博客，这里Octopress会自动连接上你刚刚新建的Repo。</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>编辑生成了<code>_config.yml</code>和<code>Rakefile</code>, 除了博客以外，以后基本上只需要设置和修改这两个文件。
首先在<code>_config.yml</code>中写入博客名和其他信息（前面一些基本信息），开始写第一篇博客：</p>

<pre><code>rake new_page["About"]    # 添加博客页
rake new_post["Hello World"]  # 新建一篇文章
</code></pre>

<p>添加deploy.sh，以后一键运行发布到Github：</p>

<figure class='code'><figcaption><span>deploy.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate      <span class="c"># 生成页面</span>
</span><span class='line'><span class="c">#rake preview      # 如果需要在本地预览生成的结果，预览页http://localhost:4000 </span>
</span><span class='line'>rake deploy        <span class="c"># 发布到Github中的master分支，即username.github.io真正看到的</span>
</span><span class='line'><span class="c"># 发布源文件到Github的source分支</span>
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;Added About page and first post!&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>以后每次新建一个post，然后在<code>octopress/source/_posts/</code> 下书写markdown，发布即可。
如果要在Clou9本地生成预览结果，需要稍微修改一下<code>Rakefile</code>文件。</p>

<pre><code>#server_port     = "4000"      # port for preview server eg. localhost:4000
server_host     = ENV['IP'] ||= '0.0.0.0'     # server bind address for preview server
server_port     = ENV['PORT'] ||= "8080"      # port for preview server eg. localhost:4000

#rackupPid = Process.spawn("rackup --port #{server_port}")
rackupPid = Process.spawn("rackup --host #{server_host} --port #{server_port}")
</code></pre>

<p>然后输入<code>rake preview</code>命令后即可本地即时编辑查看，开启服务后，外部游览器访问地址为：</p>

<blockquote><p><a href="https://workspacename-username.c9.io/">https://workspacename-username.c9.io/</a></p></blockquote>

<p>其中，workspacename是你创建该Clou9 workspace时输入的名字， username是你Clou9的用户名。</p>

<h3>3. 主题和插件</h3>

<p>Jekyll和Octopress是类似于Wordpress的平台，可以安装任意主题(Themes)和插件(Plugins)。</p>

<ol>
<li>Jekyl推荐主题在<a href="http://jekyllthemes.org/">这里</a>, 还有各种站点在<a href="https://github.com/jekyll/jekyll/wiki/Sites">这里</a>。</li>
<li>Octopress推荐主题在这里<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>, 附带安装命令。这里用的是<code>whitespace</code>主题。</li>
</ol>


<p>插件方面我用了</p>

<ul>
<li><p>Disqus: 用来添加评论功能。在Disqus创建好账号后点击<code>Settings</code>，点击<code>Add Disqus to Site</code>，就可以为个人博客站点创建一个<code>short name</code>，把它添加到<code>_config.yml</code>中的<code>disqus_short_name</code>后面即可。</p></li>
<li><p>Google Analytics: 在Google Analytics中获取跟踪ID，添加到<code>_config.yml</code>中的<code>google_analytics_tracking_id</code>。</p></li>
<li><p>分类，标签以及3D标签云： 参考了<a href="http://812lcl.com/blog/2013/10/26/octopressce-bian-lan-ji-ping-lun-xi-tong-ding-zhi/">文章1</a>
和<a href="http://agiledon.github.io/blog/2013/01/08/create-tag-for-octopress/">文章2</a>。两篇文章其实是做的同样的事情。
文章1比较简单明了，但遗漏了一些东西，文章2做了相印的补充。</p></li>
</ul>


<p>我陆续碰到了如下问题：</p>

<ol>
<li><code>category_generator.rb</code>直接用自带的，不用替换。</li>
<li>缺<code>source/_layouts/tag_index.html</code>。 解决方法： 新建<code>tag_index.html</code>, 复制<code>category_index.html</code>的代码。把categories改成tags, 把category改成tag。</li>
<li>缺<code>source/_includes/custom/tag_feed.xml</code>。解决方法： 新建<code>tag_feed.xml</code>, 复制<code>category_feed.xml</code>的代码。把categories改成tags, 把category改成tag。</li>
<li>缺<code>source/javascripts/tagcloud.swf</code>。 解决方法：在<a href="https://github.com/shangfu/shangfu.github.io/tree/source/source/javascripts">这里</a> 把<code>tagcloud.swf</code> 下载下来，并且放到对应目录。</li>
</ol>


<p>另外由于我的主题没有设置边栏(asides)，所以我新建了一个page, named category, 来显示categories和tags的结果。</p>

<figure class='code'><figcaption><span>category/index.markdown </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: &quot;category&quot;
</span><span class='line'>comments: false
</span><span class='line'>sharing: false
</span><span class='line'>footer: true
</span><span class='line'>---
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;Category-cloud&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>    <span class="nf">#left</span><span class="o">,</span><span class="nf">#right</span> <span class="p">{</span><span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span><span class="m">400px</span><span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>             <span class="nt">&lt;h1&gt;</span>Category List<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>             <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                 {% category_list %}
</span><span class='line'>             <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Tag List<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;tag-cloud&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {% tag_list font-size: 90-210%, limit: 10, style: para %}
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;clear:both&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;style&gt;</span>
</span><span class='line'>    <span class="nf">#left</span><span class="o">,</span><span class="nf">#right</span> <span class="p">{</span><span class="k">float</span><span class="o">:</span><span class="k">left</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span><span class="m">400px</span><span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;left&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Category Cloud<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;category-cloud&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {% category_cloud bgcolor:#f2f2f2 %}
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h1&gt;</span>Tag Cloud<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;Tag-cloud&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                {% tag_cloud bgcolor:#f2f2f2 %}
</span><span class='line'>            <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">&quot;clear:both&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bug</h3>

<p>在添加超过一个tags之后，<code>rake generate</code>可能会开始报错了</p>

<blockquote><p>Liquid Exception: comparison of Array with Array failed in page</p></blockquote>

<p>解决办法是在 <code>plugins/tag_list.rb</code> 中修改代码：</p>

<figure class='code'><figcaption><span>plugins/tag_list.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">weighted</span> <span class="o">=</span> <span class="n">count</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">count</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># logarithmic distribution</span>
</span><span class='line'><span class="c1">#  weight = (Math.log(count) - Math.log(min))/(Math.log(max) - Math.log(min))</span>
</span><span class='line'>   <span class="k">if</span> <span class="n">min</span> <span class="o">==</span> <span class="n">max</span>   <span class="c1">#ADDED</span>
</span><span class='line'>      <span class="n">weight</span> <span class="o">=</span> <span class="mi">1</span>    <span class="c1">#ADDED</span>
</span><span class='line'>   <span class="k">else</span>            <span class="c1">#ADDED</span>
</span><span class='line'>      <span class="n">weight</span> <span class="o">=</span> <span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">count</span><span class="p">)</span> <span class="o">-</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">min</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">max</span><span class="p">)</span> <span class="o">-</span> <span class="no">Math</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">min</span><span class="p">))</span> <span class="c1">#ADDED</span>
</span><span class='line'>   <span class="k">end</span>             <span class="c1">#ADDED</span>
</span><span class='line'>  <span class="o">[</span><span class="nb">name</span><span class="p">,</span> <span class="n">weight</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. 开始使用</h3>

<p>以上都做完后，终于可以轻松地写博客了。
每次<code>rake new_post[""]</code>新建一个post。
运行 <code>rake preview</code>, 一边编写markdown内容一边查看。
添加category和tags，比如</p>

<pre><code>---
layout: post
title: "快速搭建Github Page个人博客"
date: 2015-08-20 14:53:32 +0000
comments: true
categories: Technic
tags: [Blog, Cloud9, Github, Octopress]
---
</code></pre>

<p>最后运行我们直接写好的<code>deploy.sh</code>发布到github。</p>

<h3>4. 域名绑定</h3>

<p>Github 提供了CNAME域名绑定。在Namesilo 上注册帐号，然后进入Manage My Domains, 选择域名后，进入 DNS Records UPDATE。</p>

<ol>
<li>新建A类解析，<code>HOSTNAME</code> 留空， IPV4 address 设为 <code>ping username.github.io</code> 返回的ip即可。</li>
<li>新建CNAME解析， <code>HOSTNAME</code> 设为 <code>www</code>，<code>TARGET HOSTNAME</code> 设为你的<code>username.github.io</code>。</li>
<li>在你的<code>octopress/source/</code>目录下，新建文件<code>CNAME</code>, 在该文件第一行写上你的域名，如<code>whyalgorithm.com</code>，保存。然后运行 <code>deploy.sh</code> 上传到github。
脚本会自动把<code>CNAME</code> 文件复制到<code>octopress/_deploy</code>目录下，并上传到github master 分支中。</li>
<li>耐心等待一会儿。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://whyalgorithm.com//blog/2015/08/18/hello-world/"/>
    <updated>2015-08-18T22:37:40+00:00</updated>
    <id>http://whyalgorithm.com//blog/2015/08/18/hello-world</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
